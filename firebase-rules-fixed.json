{
  "rules": {
    ".read": false,
    ".write": false,

    "users": {
      ".read": "auth != null",
      ".write": false,

      "$userId": {
        ".read": "auth != null && (auth.uid == $userId || root.child('users').child(auth.uid).child('isAdmin').val() == true)",
        ".write": "auth != null && (auth.uid == $userId || root.child('users').child(auth.uid).child('isAdmin').val() == true)",
        ".validate": "newData.hasChildren(['email', 'uid', 'createdAt'])",

        "email": {
          ".validate": "newData.isString() && newData.val().contains('@') && (!data.exists() || newData.val() == data.val())"
        },
        "uid": {
          ".validate": "newData.val() == $userId && (!data.exists() || newData.val() == data.val())"
        },
        "createdAt": {
          ".validate": "newData.isString() && (!data.exists() || newData.val() == data.val())"
        },
        "balance": {
          ".validate": "newData.isNumber() && newData.val() >= 0",
          ".write": "root.child('users').child(auth.uid).child('isAdmin').val() == true"
        },
        "totalTrialEarnings": {
          ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 25",
          ".write": "root.child('users').child(auth.uid).child('isAdmin').val() == true"
        },
        "referralEarnings": {
          ".validate": "newData.isNumber() && newData.val() >= 0",
          ".write": "root.child('users').child(auth.uid).child('isAdmin').val() == true"
        },
        "isAdmin": {
          ".write": "root.child('users').child(auth.uid).child('isAdmin').val() == true",
          ".validate": "newData.isBoolean()"
        },
        "isBanned": {
          ".write": "root.child('users').child(auth.uid).child('isAdmin').val() == true",
          ".validate": "newData.isBoolean()"
        },
        "activePackage": {
          ".validate": "newData.isString() || newData.val() == null",
          ".write": "root.child('users').child(auth.uid).child('isAdmin').val() == true"
        },
        "packageExpiresAt": {
          ".validate": "newData.isString() || newData.val() == null",
          ".write": "root.child('users').child(auth.uid).child('isAdmin').val() == true"
        },
        "packageHashRate": {
          ".validate": "newData.isNumber() || newData.val() == null",
          ".write": "root.child('users').child(auth.uid).child('isAdmin').val() == true"
        },
        "packageDailyEarning": {
          ".validate": "newData.isNumber() || newData.val() == null",
          ".write": "root.child('users').child(auth.uid).child('isAdmin').val() == true"
        },
        "referralCode": {
          ".validate": "newData.isString() && newData.val().length == 6 && (!data.exists() || newData.val() == data.val())"
        },
        "referredBy": {
          ".validate": "(newData.isString() || newData.val() == null) && (!data.exists() || newData.val() == data.val())"
        },
        "totalReferrals": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        }
      }
    },

    "user_preferences": {
      ".read": "auth != null",
      "$userId": {
        ".read": "auth.uid == $userId",
        ".write": "auth.uid == $userId",
        ".validate": "newData.hasChildren(['theme', 'language']) || data.exists() && newData.hasChildren(['theme']) || data.exists() && newData.hasChildren(['language'])",

        "theme": { ".validate": "newData.isString() && newData.val().matches(/^(light|dark)$/)" },
        "language": { ".validate": "newData.isString() && newData.val().matches(/^(tr|en|de|ru|ar|zh)$/)" }
      }
    },

    "miningSessions": {
      ".read": "auth != null && root.child('users').child(auth.uid).child('isAdmin').val() == true",

      "$userId": {
        ".read": "auth != null && (auth.uid == $userId || root.child('users').child(auth.uid).child('isAdmin').val() == true)",
        ".write": "auth != null && auth.uid == $userId",

        "$sessionId": {
          ".validate": "newData.hasChildren(['userId', 'coin', 'startTime', 'hashRate', 'totalEarned', 'isActive'])",

          "userId": {
            ".validate": "newData.val() == $userId && (!data.exists() || newData.val() == data.val())"
          },
          "coin": {
            ".validate": "newData.isString() && newData.val().matches(/^(btc|eth|doge|ltc|ada|dot|sol|matic)$/)"
          },
          "hashRate": {
            ".validate": "newData.isNumber() && newData.val() > 0"
          },
          "totalEarned": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "isActive": {
            ".validate": "newData.isBoolean()"
          },
          "startTime": {
            ".validate": "newData.isString()"
          }
        }
      }
    },

    "paymentNotifications": {
      ".read": "auth != null && root.child('users').child(auth.uid).child('isAdmin').val() == true",
      ".write": false,

      "$notificationId": {
        ".write": "(!data.exists() && auth.uid == newData.child('userId').val()) || root.child('users').child(auth.uid).child('isAdmin').val() == true",
        ".read": "auth.uid == data.child('userId').val() || root.child('users').child(auth.uid).child('isAdmin').val() == true",

        ".validate": "newData.hasChildren(['userId', 'packageId', 'amount', 'status', 'createdAt'])",

        "userId": {
          ".validate": "newData.isString() && (!data.exists() || newData.val() == data.val())"
        },
        "packageId": {
          ".validate": "newData.isString() && newData.val().matches(/^(starter|professional|enterprise)$/)"
        },
        "amount": {
          ".validate": "newData.isNumber() && newData.val() > 0"
        },
        "status": {
          ".write": "data.exists() && root.child('users').child(auth.uid).child('isAdmin').val() == true",
          ".validate": "newData.isString() && newData.val().matches(/^(pending|approved|rejected)$/)"
        },
        "createdAt": {
          ".validate": "newData.isString() && (!data.exists() || newData.val() == data.val())"
        },
        "txHash": {
          ".validate": "newData.isString() || newData.val() == null"
        }
      }
    },

    "withdrawalRequests": {
      ".read": "auth != null && root.child('users').child(auth.uid).child('isAdmin').val() == true",
      ".write": false,

      "$requestId": {
        ".read": "auth != null && (data.child('userId').val() == auth.uid || root.child('users').child(auth.uid).child('isAdmin').val() == true)",
        ".write": "(!data.exists() && auth.uid == newData.child('userId').val() && newData.child('amount').val() <= root.child('users').child(auth.uid).child('balance').val()) || root.child('users').child(auth.uid).child('isAdmin').val() == true",

        ".validate": "newData.hasChildren(['userId', 'amount', 'walletAddress', 'status', 'requestedAt'])",

        "userId": {
          ".validate": "newData.isString() && (!data.exists() || newData.val() == data.val())"
        },
        "amount": {
          ".validate": "newData.isNumber() && newData.val() >= 10"
        },
        "walletAddress": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "status": {
          ".write": "data.exists() && root.child('users').child(auth.uid).child('isAdmin').val() == true",
          ".validate": "newData.isString() && newData.val().matches(/^(pending|approved|rejected|completed)$/)"
        },
        "requestedAt": {
          ".validate": "newData.isString() && (!data.exists() || newData.val() == data.val())"
        }
      }
    },

    "supportTickets": {
      ".read": "auth != null && root.child('users').child(auth.uid).child('isAdmin').val() == true",
      ".write": false,

      "$ticketId": {
        ".read": "auth != null && (data.child('userId').val() == auth.uid || root.child('users').child(auth.uid).child('isAdmin').val() == true)",
        ".write": "(!data.exists() && auth.uid == newData.child('userId').val()) || root.child('users').child(auth.uid).child('isAdmin').val() == true",

        ".validate": "newData.hasChildren(['userId', 'subject', 'message', 'status', 'priority', 'createdAt'])",

        "userId": {
          ".validate": "newData.isString() && (!data.exists() || newData.val() == data.val())"
        },
        "subject": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 200"
        },
        "message": {
          ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length <= 2000"
        },
        "status": {
          ".write": "data.exists() && root.child('users').child(auth.uid).child('isAdmin').val() == true",
          ".validate": "newData.isString() && newData.val().matches(/^(open|in-progress|closed)$/)"
        },
        "priority": {
          ".write": "data.exists() && root.child('users').child(auth.uid).child('isAdmin').val() == true",
          ".validate": "newData.isString() && newData.val().matches(/^(low|medium|high)$/)"
        },
        "createdAt": {
          ".validate": "newData.isString() && (!data.exists() || newData.val() == data.val())"
        }
      }
    },

    "referralBonuses": {
      ".read": "auth != null && root.child('users').child(auth.uid).child('isAdmin').val() == true",
      ".write": "auth != null && root.child('users').child(auth.uid).child('isAdmin').val() == true",

      "$bonusId": {
        ".validate": "newData.hasChildren(['referrerId', 'referredUserId', 'packageId', 'packageAmount', 'bonusAmount', 'status', 'createdAt'])",

        "bonusAmount": { ".validate": "newData.isNumber() && newData.val() > 0" },
        "status": { ".validate": "newData.isString() && newData.val().matches(/^(pending|paid)$/)" },
        "createdAt": {
          ".validate": "newData.isString()"
        }
      }
    },

    "balanceLogs": {
      ".read": "auth != null && root.child('users').child(auth.uid).child('isAdmin').val() == true",
      ".write": "auth != null && root.child('users').child(auth.uid).child('isAdmin').val() == true",

      "$logId": {
        ".validate": "newData.hasChildren(['userId', 'adminId', 'previousBalance', 'newBalance', 'operation', 'amount', 'timestamp'])",

        "adminId": {
          ".validate": "newData.val() == auth.uid && (!data.exists() || newData.val() == data.val())"
        },
        "operation": {
          ".validate": "newData.isString() && newData.val().matches(/^(add|subtract|set)$/)"
        },
        "timestamp": {
          ".validate": "newData.isString() && (!data.exists() || newData.val() == data.val())"
        }
      }
    },

    "securityLogs": {
      ".read": "auth != null && root.child('users').child(auth.uid).child('isAdmin').val() == true",
      ".write": "auth != null",

      "$logId": {
        ".validate": "newData.hasChildren(['userId', 'action', 'timestamp'])",

        "action": {
          ".validate": "newData.isString() && newData.val().matches(/^(LOGIN|LOGOUT|ACCOUNT_CREATED|LOGIN_FAILED|SUSPICIOUS_ACTIVITY)$/)"
        },
        "timestamp": {
          ".validate": "newData.isString()"
        }
      }
    }
  }
}
